{"ast":null,"code":"var _jsxFileName = \"/Users/yejun/projects/RecipeFront/src/Body/Popular.tsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport '../CSS/Popular.css'; // CSS 스타일을 따로 추가할 수 있습니다.\nimport FoodCardComponent from '../Components/FoodCardComponent';\nimport { API_SRC } from '../API/custom_search_api_service';\nimport { useQuery } from '@tanstack/react-query';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nasync function custom_search(name) {\n  const response = await fetch(API_SRC + name);\n  if (!response.ok) {\n    console.log('Something went wrong!');\n    throw new Error('Something went wrong!');\n  }\n  const data = await response.json();\n  console.log(data);\n  return '정보없음';\n}\nconst Popular = () => {\n  _s();\n  const test_data = ['닭갈비', '샐러드', '피자', '돈까스', '스파게티', '라면', '감자탕', '냉면'];\n  const test_data_list = test_data.map((name, idx) => /*#__PURE__*/_jsxDEV(FoodCardComponent, {\n    name: name,\n    img_src: \"\\uC815\\uBCF4\\uC5C6\\uC74C\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 74\n  }, this));\n  //custom_search(\"닭갈비\");\n  //이미지 검색 추가.\n\n  const {\n    data,\n    error,\n    isLoading,\n    isError\n  } = useQuery({\n    queryKey: ['posts'],\n    // 데이터 캐시 키\n    queryFn: fetchPosts // 데이터를 가져오는 함수\n  });\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 12\n    }, this);\n  }\n  if (isError) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error: \", error.message]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-container\",\n      children: test_data_list\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n\n// 데이터를 fetch하는 함수\n_s(Popular, \"tLVl4bLXOK0wdfcIQIhOB1GmFVs=\", false, function () {\n  return [useQuery];\n});\n_c = Popular;\nconst fetchPosts = async () => {\n  const response = await fetch('https://jsonplaceholder.typicode.com/posts');\n  if (!response.ok) {\n    throw new Error('Network response was not ok');\n  }\n  return response.json();\n};\n/*\nfunction App() {\n  // useQuery 훅을 사용하여 데이터를 가져옵니다.\n  const { data, error, isLoading, isError } = useQuery({\n    queryKey: ['posts'],  // 데이터 캐시 키\n    queryFn: fetchPosts,  // 데이터를 가져오는 함수\n  });\n\n  if (isLoading) {\n    return <div>Loading...</div>;\n  }\n\n  if (isError) {\n    return <div>Error: {error.message}</div>;\n  }\n\n  return (\n    <div>\n      <h1>Posts</h1>\n      <ul>\n        {data.map(post => (\n          <li key={post.id}>{post.title}</li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n*/\n\nexport default Popular;\nvar _c;\n$RefreshReg$(_c, \"Popular\");","map":{"version":3,"names":["React","FoodCardComponent","API_SRC","useQuery","jsxDEV","_jsxDEV","custom_search","name","response","fetch","ok","console","log","Error","data","json","Popular","_s","test_data","test_data_list","map","idx","img_src","fileName","_jsxFileName","lineNumber","columnNumber","error","isLoading","isError","queryKey","queryFn","fetchPosts","children","message","className","_c","$RefreshReg$"],"sources":["/Users/yejun/projects/RecipeFront/src/Body/Popular.tsx"],"sourcesContent":["import React from 'react';\nimport '../CSS/Popular.css';  // CSS 스타일을 따로 추가할 수 있습니다.\nimport FoodCardComponent from '../Components/FoodCardComponent';\nimport { API_key, API_SRC } from '../API/custom_search_api_service';\nimport { useQuery } from '@tanstack/react-query';\n\nasync function custom_search (name : string) {\n  const response = await fetch(API_SRC + name);\n  if (!response.ok) {\n    console.log('Something went wrong!');\n    throw new Error('Something went wrong!');\n  }\n  const data = await response.json();\n  console.log(data);\n  return '정보없음';\n}\n\nconst Popular: React.FC = () => {\n  const test_data = ['닭갈비', '샐러드', '피자', '돈까스', '스파게티', '라면', '감자탕', '냉면'];\n  const test_data_list = test_data.map((name : string, idx : number) => (<FoodCardComponent name={name} img_src='정보없음'></FoodCardComponent>));\n  //custom_search(\"닭갈비\");\n  //이미지 검색 추가.\n\n  const { data, error, isLoading, isError } = useQuery({\n    queryKey: ['posts'],  // 데이터 캐시 키\n    queryFn: fetchPosts,  // 데이터를 가져오는 함수\n  });\n\n  if (isLoading) {\n    return <div>Loading...</div>;\n  }\n\n  if (isError) {\n    return <div>Error: {error.message}</div>;\n  }\n\n  return (\n    <div className=\"app-container\">\n      \n      {/* 카드 레이아웃 */}\n      <div className=\"card-container\">\n        {test_data_list}\n      </div>\n    </div>\n  );\n}\n\n// 데이터를 fetch하는 함수\nconst fetchPosts = async () => {\n  const response = await fetch('https://jsonplaceholder.typicode.com/posts');\n  if (!response.ok) {\n    throw new Error('Network response was not ok');\n  }\n  return response.json();\n};\n/*\nfunction App() {\n  // useQuery 훅을 사용하여 데이터를 가져옵니다.\n  const { data, error, isLoading, isError } = useQuery({\n    queryKey: ['posts'],  // 데이터 캐시 키\n    queryFn: fetchPosts,  // 데이터를 가져오는 함수\n  });\n\n  if (isLoading) {\n    return <div>Loading...</div>;\n  }\n\n  if (isError) {\n    return <div>Error: {error.message}</div>;\n  }\n\n  return (\n    <div>\n      <h1>Posts</h1>\n      <ul>\n        {data.map(post => (\n          <li key={post.id}>{post.title}</li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n*/\n\nexport default Popular;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}